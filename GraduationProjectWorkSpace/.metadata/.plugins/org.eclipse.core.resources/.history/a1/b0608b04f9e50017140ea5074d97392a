package com.cencl.sso.service.impl;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.cencl.common.utils.CenclResult;
import com.cencl.common.utils.ExceptionUtil;
import com.cencl.common.utils.JsonUtils;
import com.cencl.mapper.TbUserMapper;
import com.cencl.pojo.TbUser;
import com.cencl.pojo.TbUserExample;
import com.cencl.pojo.TbUserExample.Criteria;
import com.cencl.sso.dao.JedisClient;
import com.cencl.sso.service.UserService;

/* *
* <p>Title: 用户管理Service</p>
* <p>Description: </p>
* <p>Company: Nothing</p>
* @author:  phubing
* @date: 2017年12月20日上午11:19:04
* version 0.0.1
*/
@Service
public class UserServiceImpl implements UserService {
	@Value("${REDIS_USER_SESSION_KEY}")
	private String REDIS_USER_SESSION_KEY;
	@Value("${SSO_SESSION_EXPIRE}")
	private Integer SSO_SESSION_EXPIRE;
	
	@Autowired
	private JedisClient jedisClient;
	
	@Autowired
	private TbUserMapper userMapper;
	
	@Override
	public CenclResult checkData(String content, Integer type) {
		//创建查询条件
		TbUserExample example = new TbUserExample();
		Criteria criteria = example.createCriteria();
		//对数据进行校验：1、2、3分别代表username、phone、email
		//用户名校验
		if (1 == type) {
			criteria.andUsernameEqualTo(content);
		//电话校验
		} else if ( 2 == type) {
			criteria.andPhoneEqualTo(content);
		//email校验
		} else {
			criteria.andEmailEqualTo(content);
		}
		//执行查询
		List<TbUser> list = userMapper.selectByExample(example);
		if (list == null || list.size() == 0) {
			return CenclResult.ok(true);
		}
		return CenclResult.ok(false);
	}

	@Override
	public CenclResult createUser(TbUser tbUser) {
		//补全pojo
		tbUser.setCreated(new Date());
		tbUser.setUpdated(new Date());
		
		tbUser.setPassword(DigestUtils.md5DigestAsHex(tbUser.getPassword().getBytes()));
		
		userMapper.insert(tbUser);
		
		return CenclResult.ok();
	}
	
	
	@Override
public CenclResult userLogin(String username, String password) {
		
		TbUserExample example = new TbUserExample();
		Criteria criteria = example.createCriteria();
		criteria.andUsernameEqualTo(username);
		List<TbUser> list = userMapper.selectByExample(example);
		//如果没有此用户名
		if (null == list || list.size() == 0) {
			return CenclResult.build(400, "用户名或密码错误");
		}
		TbUser user = list.get(0);
		//比对密码
		if (!DigestUtils.md5DigestAsHex(password.getBytes()).equals(user.getPassword())) {
			return CenclResult.build(400, "用户名或密码错误");
		}
		//生成token
		String token = UUID.randomUUID().toString();
		//保存用户之前，把用户对象中的密码清空。
		user.setPassword(null);
		//写入redis,返回token(hash不能为每一个单独字符串设置过期时间)
		jedisClient.set(REDIS_USER_SESSION_KEY + ":" + token, JsonUtils.objectToJson(user));
		//设置session的过期时间
		//将对象转换成序列化字符串
		jedisClient.expire(REDIS_USER_SESSION_KEY + ":" + token, SSO_SESSION_EXPIRE);
		//返回token
		return CenclResult.ok(token);
	}

	@Override
	public CenclResult getToken(String token) {
		//用户信息为json类型
		String json = jedisClient.get(REDIS_USER_SESSION_KEY + ":" + token);
		
		//判断token
		if(StringUtils.isBlank(json)){
			return CenclResult.build(500, "用户信息已过期，请重新登录");
			
			
			
			
		}
		
		
		
		return null;
	}

}
